"use strict";

var _react = _interopRequireDefault(require("react"));

var _ink = require("ink");

var _samples = require("./tech/samples");

var _tcr = require("./tcr");

var _components = require("./components");

var _shell = require("./tech/shell");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var availableLanguages = ['csharp', 'java', 'node', 'python', 'ruby'];

if (process.argv.length === 3 && process.argv.slice(2)[0].startsWith('--')) {
  var language = process.argv.slice(2)[0].replace('--', '');

  if (availableLanguages.indexOf(language) > -1) {
    (0, _samples.createSample)(language, function () {
      if (language === 'node') {
        (0, _shell.exec)('npm install', {
          onPass: function onPass(output) {
            (0, _tcr.runTcr)('./runTests.sh');
          },
          onFail: function onFail(output) {
            (0, _ink.render)(output);
            process.exit(1);
          },
          onProgress: function onProgress(output) {
            (0, _ink.render)(output);
          }
        });
      } else {
        (0, _tcr.runTcr)('./runTests.sh');
      }
    });
  } else {
    console.log('Sorry, only these languages are supported for samples', availableLanguages);
    process.exit(1);
  }
} else if (process.argv.length === 3) {
  (0, _tcr.runTcr)(process.argv.slice(2)[0]);
} else {
  (0, _ink.render)(_react.default.createElement(_components.NotEnoughArgumentsError, null));
  process.exit(1);
}