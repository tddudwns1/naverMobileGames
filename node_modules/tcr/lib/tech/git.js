"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gitStats = exports.gitReset = exports.gitCommit = exports.gitStatus = exports.gitIgnoring = void 0;

var _simpleGit = _interopRequireDefault(require("simple-git"));

var _fs = _interopRequireDefault(require("fs"));

var _parseGitignore = _interopRequireDefault(require("parse-gitignore"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var gitRepo = (0, _simpleGit.default)('.').silent(true);
var commitCount = 0;
var resetCount = 0;

var gitIgnoring = function gitIgnoring() {
  if (_fs.default.existsSync('.gitignore')) {
    return (0, _parseGitignore.default)(_fs.default.readFileSync('.gitignore'));
  }

  return [];
};

exports.gitIgnoring = gitIgnoring;

var gitStatus = function gitStatus(callback) {
  gitRepo.status(function (err, statusSummary) {
    callback(err, statusSummary.files);
  });
};

exports.gitStatus = gitStatus;

var gitCommit = function gitCommit(message, callback) {
  gitStatus(function (_, files) {
    if (files.length !== 0) {
      gitRepo.add('./*').commit(message);
      commitCount++;
    }

    callback();
  });
};

exports.gitCommit = gitCommit;

var gitReset = function gitReset() {
  gitRepo.reset(['HEAD', '--hard']);
  resetCount++;
};

exports.gitReset = gitReset;

var gitStats = function gitStats() {
  return {
    commitCount: commitCount,
    resetCount: resetCount
  };
};

exports.gitStats = gitStats;