"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TestFailingBeforeWeStartError = exports.UncommitedFilesGitError = exports.NoGitRepoError = exports.NotEnoughArgumentsError = exports.FailSummary = exports.PassSummary = exports.RunningSummary = exports.Stats = exports.LastChange = exports.Logo = void 0;

var _react = _interopRequireDefault(require("react"));

var _ink = require("ink");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable react/prop-types */
var Logo = function Logo() {
  return _react.default.createElement(_ink.Box, null, _react.default.createElement(_ink.Color, {
    black: true,
    bgWhite: true
  }, " TCR "));
};

exports.Logo = Logo;

var LastChange = function LastChange(_ref) {
  var path = _ref.path;
  return _react.default.createElement(_ink.Box, null, _react.default.createElement(_ink.Color, {
    dim: true
  }, "last change:"), " ", path);
};

exports.LastChange = LastChange;

var Stats = function Stats(_ref2) {
  var stats = _ref2.stats;
  return _react.default.createElement(_ink.Box, null, " ", _react.default.createElement(_ink.Color, {
    dim: true
  }, stats.commitCount, " commits, ", stats.resetCount, " resets "));
};

exports.Stats = Stats;

var RunningSummary = function RunningSummary(_ref3) {
  var path = _ref3.path,
      outputText = _ref3.outputText;
  return _react.default.createElement(_ink.Box, {
    flexDirection: "column"
  }, _react.default.createElement(_ink.Box, {
    marginTop: 1
  }, _react.default.createElement(Logo, null), " ", _react.default.createElement(LastChange, {
    path: path
  })), _react.default.createElement(_ink.Box, {
    marginTop: 1
  }, outputText), _react.default.createElement(_ink.Box, {
    marginTop: 1
  }, _react.default.createElement(Logo, null), _react.default.createElement(_ink.Color, {
    bgYellow: true,
    black: true
  }, " RUNNING ")));
};

exports.RunningSummary = RunningSummary;

var PassSummary = function PassSummary(_ref4) {
  var path = _ref4.path,
      outputText = _ref4.outputText,
      stats = _ref4.stats;
  return _react.default.createElement(_ink.Box, {
    flexDirection: "column"
  }, _react.default.createElement(_ink.Box, {
    marginTop: 1
  }, _react.default.createElement(Logo, null), " ", _react.default.createElement(LastChange, {
    path: path
  })), _react.default.createElement(_ink.Box, {
    marginTop: 1
  }, outputText), _react.default.createElement(_ink.Box, {
    marginTop: 1
  }, _react.default.createElement(Logo, null), _react.default.createElement(_ink.Color, {
    bgGreen: true,
    black: true
  }, " PASSED "), _react.default.createElement(Stats, {
    stats: stats
  })));
};

exports.PassSummary = PassSummary;

var FailSummary = function FailSummary(_ref5) {
  var path = _ref5.path,
      outputText = _ref5.outputText,
      stats = _ref5.stats;
  return _react.default.createElement(_ink.Box, {
    flexDirection: "column"
  }, _react.default.createElement(_ink.Box, {
    marginTop: 1
  }, _react.default.createElement(Logo, null), " ", _react.default.createElement(LastChange, {
    path: path
  })), _react.default.createElement(_ink.Box, {
    marginTop: 1
  }, outputText), _react.default.createElement(_ink.Box, {
    marginTop: 1
  }, _react.default.createElement(Logo, null), _react.default.createElement(_ink.Color, {
    bgRed: true,
    black: true
  }, " FAILED "), _react.default.createElement(Stats, {
    stats: stats
  })));
};

exports.FailSummary = FailSummary;

var NotEnoughArgumentsError = function NotEnoughArgumentsError() {
  return _react.default.createElement(_ink.Box, {
    flexDirection: "column",
    marginBottom: 1
  }, _react.default.createElement(_ink.Box, null, _react.default.createElement(Logo, null), _react.default.createElement(_ink.Color, {
    bgRed: true,
    black: true
  }, " PROBLEM ")), _react.default.createElement(_ink.Box, {
    marginTop: 1
  }, "Please specify one argument to use to test your program!"), _react.default.createElement(_ink.Box, null, "For example: `tcr \"./gradlew test\"`"));
};

exports.NotEnoughArgumentsError = NotEnoughArgumentsError;

var NoGitRepoError = function NoGitRepoError(_ref6) {
  var err = _ref6.err;
  return _react.default.createElement(_ink.Box, {
    flexDirection: "column"
  }, _react.default.createElement(_ink.Box, null, _react.default.createElement(Logo, null), _react.default.createElement(_ink.Color, {
    bgRed: true,
    black: true
  }, " PROBLEM ")), _react.default.createElement(_ink.Box, {
    marginTop: 1
  }, "Is this a valid Git repo? TCR needs one to start. Try `git init`"), _react.default.createElement(_ink.Box, {
    marginTop: 1
  }, err));
};

exports.NoGitRepoError = NoGitRepoError;

var UncommitedFilesGitError = function UncommitedFilesGitError(_ref7) {
  var changedFiles = _ref7.changedFiles;
  var problemFiles = changedFiles.map(function (file) {
    return _react.default.createElement(_ink.Box, {
      key: file.path
    }, " * ", _react.default.createElement(_ink.Color, {
      red: true
    }, file.path));
  });
  return _react.default.createElement(_ink.Box, {
    flexDirection: "column",
    marginBottom: 1
  }, _react.default.createElement(_ink.Box, null, _react.default.createElement(Logo, null), _react.default.createElement(_ink.Color, {
    bgRed: true,
    black: true
  }, " PROBLEM ")), _react.default.createElement(_ink.Box, {
    marginTop: 1
  }, "There are files already changed in this repo, please commit them before starting a TCR session"), _react.default.createElement(_ink.Box, {
    flexDirection: "column",
    marginTop: 1
  }, problemFiles));
};

exports.UncommitedFilesGitError = UncommitedFilesGitError;

var TestFailingBeforeWeStartError = function TestFailingBeforeWeStartError(_ref8) {
  var outputText = _ref8.outputText;
  return _react.default.createElement(_ink.Box, {
    flexDirection: "column",
    marginBottom: 1
  }, _react.default.createElement(_ink.Box, null, _react.default.createElement(Logo, null), _react.default.createElement(_ink.Color, {
    bgRed: true,
    black: true
  }, " PROBLEM ")), _react.default.createElement(_ink.Box, {
    marginTop: 1
  }, outputText), _react.default.createElement(_ink.Box, {
    marginTop: 1
  }, " * ", _react.default.createElement(_ink.Color, {
    red: true
  }, "Quitting TCR as tests are already failing! Fix the tests then restart TCR")));
};

exports.TestFailingBeforeWeStartError = TestFailingBeforeWeStartError;